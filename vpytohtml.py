from chromedriverService import BrowserFromService, Keys, msg
from copypaste import write_to_clipboard, read_from_clipboard
from time import sleep
from selenium.webdriver import ActionChains
import requests
import plumbum
from plumbum.path.utils import delete
from plumbum.cmd import ls, touch, mkdir, pwd

GSpath = 'http://localhost:8080/#/user/lyteuser/folder/Public/'

def login(B):
    B.get('http://localhost:8080/_ah/login')
    sleep(1)
    input=B.find_element_by_id('email')
    input.click()
    input.send_keys(Keys.RIGHT * 20)
    input.send_keys(Keys.BACKSPACE * 20)
    input.send_keys('lyteuser@gmail.com') #lyte2018
    input.send_keys(Keys.TAB*2)
    input.send_keys(Keys.RETURN)
#login()



def srcFromFileName(filename='test.py'):
    """get source, apply transformation"""

    thesource=open(filename).read()
    nameOfDir = filename.replace('.py','')
    lines= thesource.split('\n')
    lines.insert(1, 'def GlowMe( me=""): pass\n')
    #lines.insert(2, "get_library('http://localhost:8080/lib/jonlib.js')\n")
    lines.insert(2, f"get_library('http://localhost:8081/{nameOfDir}/imports.js')\n")
    
    
    fixedLines=[]
    for line in lines:
        #lines beginning with any of these phrases need to commented out 
        toxicStarters = 'GlowMe from import DICT=dict'.split()
        for poison in toxicStarters:
            if line.strip().startswith(poison):
                line='##GlowMe    '+line
                #print(line)                
        fixedLines.append(line)
            
    return '\n'.join(fixedLines)

def goToWorkspace(B):
    global textarea
    B.get(GSpath)# 'http://localhost:8080/#/user/lyteuser/folder/Public/')
    sleep(3)
    B.find_element_by_link_text('Create New Program').click()
    actions=ActionChains(B)
    actions.send_keys('workspace' + Keys.RETURN).perform() #THIS MAKES PAST WORK.

    textarea=B.find_element_by_tag_name('textarea')
    return textarea


def pasteToBrowser(src, B):
    #select all and delete
    textarea=B.find_element_by_tag_name('textarea')
    
    #copy into clipboard
    write_to_clipboard('\n' + src + '\n')
    sleep(1)

    actions=ActionChains(B)
    actions.context_click().send_keys(Keys.ARROW_DOWN).perform() #THIS MAKES PASTE WORK.
    
    #paste
    actions=ActionChains(B)
    actions.send_keys(Keys.SHIFT+Keys.INSERT).perform()



def getEmbeddableSrc(B):
    B.get(f'{GSpath}program/workspace/share')
    sleep(1) #allow time for textarea to fill
    textarea=B.find_element_by_tag_name('textarea')
    embeddableSrc = B.find_element_by_css_selector('.embedSource').text
    return embeddableSrc


def createHTML(targetName, B, src=None, importsJS="alert('imports.js present but empty')"): #works; depends on glowscript server for scripts but creates directory that is free standing.
    def ret(): #convenient object
        pass
    ret.targetName=targetName
    
    if src == None:
        src = getEmbeddableSrc( B )

    try:
        src = src.split('<![CDATA[//><!--')[1]
    except IndexError:
        print('GLOWSCRIPT ERROR')
        return None
        
    
    ret.folderName = targetName.replace('.py', '')
    
    import SSstache
    ret.newDirs = SSstache.makeHTMLdir( ret.folderName )
    ret.filepath =      ret.newDirs['HTMLdir'] + '/' + 'index.html'
    ret.importJSfile =  ret.newDirs['HTMLdir'] + '/' + 'imports.js'
    with open(ret.importJSfile, 'w') as f:
        f.write(importsJS)
    
    
    f=open( ret.filepath , 'w' )
    f.write(f"""<!--------------------------------------------------------
    This file (index.html) and the other files in this folder 
    were generated by vpytohtml.py 
    to make the vpython script called "{targetName}" 
    run in the browser without dependencies.
    {targetName}:
    

{srcFromFileName( targetName )}

---------------------------------------------------------------->

<div id="glowscript" class="glowscript">

<link type="text/css" href="supportScripts/jquery-ui.custom.css" rel="stylesheet" />
<link type="text/css" href="supportScripts/ide.css" rel="stylesheet" />

<script type="text/javascript" language="javascript" src="supportScripts/jquery.min.js"></script>
<script type="text/javascript" language="javascript" src="supportScripts/jquery-ui.custom.min.js"></script>
<script type="text/javascript"                       src="supportScripts/glow.2.7.min.js"></script>
<script type="text/javascript"                       src="supportScripts/RSrun.2.7.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
{src}  """)
    f.close()
    
    print(f'Created {ret.filepath}' )
    return ret
     
def make_importsJS():
    return """
function interval(func, wait, times){
    var interv = function(w, t){
        return function(){
            if(typeof t === "undefined" || t-- > 0){
                setTimeout(interv, w);
                try{
                    func.call(null);
                }
                catch(e){
                    t = 0;
                    throw e.toString();
                }
            }
        };
    }(wait, times);

    setTimeout(interv, wait);
};

function blurt(){alert('this could be say')}

"""
    
from plumbum import local, NOHUP, BG

def startGlowScript():
    python=local['python']
    dev_appserver = local['/Users/jonschull-MBPR/Downloads/google-cloud-sdk/bin/dev_appserver.py']
    GSappYAML = local['/Users/jonschull-MBPR/glowscript/app.yaml']
    python[dev_appserver, GSappYAML] & NOHUP(stdout='/dev/null')
    sleep(2) #give the server time to start up
    
def GSserverIsRunning():
    try:
        requests.get('http://localhost:8080')
        msg('okGS)')
        return 1
    except Exception as e:
        msg('newGS')
        startGlowScript()
        try:
            requests.get('http://localhost:8080')
            return 1
        except Exception as e:
            print(e)
            print('FAILED TO START GLOWSCRIPT SERVER')
            return 0

def killServer(port):
    port=str(port)
    from plumbum.cmd import lsof, kill
    PID = lsof(f'-i:{port}').split()[10]
    kill(PID)

def webServer(targetName):
    from plumbum import local, NOHUP, BG
    python3 = local['python3']
    dirName = targetName.replace('.py','')
    python3['-m', 'http.server', '8081'] & NOHUP(stdout='/dev/null')
    msg('server at 8081')
    #BrowserFromService().get(f'http://localhost:8081/{dirName}')


def vpy_to_html(targetName = 'test.py', headless=True, openBrowser=False):
    global B
    #headless= True
    msg('(GS:localhost:8080?')
    if GSserverIsRunning():
        msg('OK')
        
    msg(f'Chrome')
    B = BrowserFromService(headless = headless)
    if headless: print('headless', end='...')
    msg(f'logging in')
       
    login(B)
    msg('IN')
    

    msg(f'{targetName}-->')
    goToWorkspace(B)

    pasteToBrowser( srcFromFileName( targetName ), B )

    #indexHTML =
    createHTML(targetName, B, importsJS=make_importsJS() )
    B.get(f'{GSpath}program/workspace')
    ActionChains(B).send_keys(Keys.ESCAPE).perform() #get rid of the magic context menu?
    sleep(2)
    try:
        errorTB = B.find_elements_by_class_name('error-traceback')[1].text
        errorMsg = B.find_elements_by_class_name('error-details')[1].text
        print(f"""GLOWSCRIPT ERROR  {errorTB}
                                    {errorMsg}""")
        return 'GLOWSCRIPT ERROR'
    except:
        #alerts cause UnexpectedAlertPresentException 
        import sys
        print(sys.exc_info()[0])
        if openBrowser:
            webServer(targetName)
        return 'SUCCESS'
    


def createTestPy(timestamp=''):
    msg('creating test.py')
    with open('test.py', 'w') as f:
        f.write(f"""

print(interval) # to prove that imports.js got through

box()

print('this is test.py')

def f():
    print('this is a function')
f()

blurt('this works thanks to imports.js')

print("{timestamp}")

""")

    
if __name__=='__mxxxain__':
    
    import sys
    
    if len(sys.argv)>1:
        pyFile = sys.argv[1]
    else:
        pyFile='test.py'
        import time
        createTestPy(time.strftime('%X %x %Z'))
    
    vpy_to_html( pyFile, headless=False, openBrowser=True)
    