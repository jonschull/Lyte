
try:
    from pythonize import strings
    context='RAPYDSCRIPT'
    strings()
    from __python__ import dict_literals, overload_getitem
except ModuleNotFoundError:
    context='PYTHON'

def typer(thing):
    strType = str(type(thing))
    typeID = strType.split('{')[0].strip()
    typeID = typeID.replace('function ','').replace('()','')
    return "<" + typeID + ">"

class AttrThing():
    def __init__(self,*args, **kwargs):
        #print('args', args, 'kwargs', kwargs,'  len(args)', len(args))
        if len(args)==1: #dict, attrthing or object to be re-typed
            thing = args[0]
            if 1: #typer(thing) == typer(dict()):
                for k,v in thing.items():
                    self[k]=v
        else:
            for kwarg in kwargs:
                self[kwarg]=kwargs[kwarg]

    def __call__(self, *args, **kwargs):
        print('in __call__', args, kwargs)
        for k,v in kwargs.items(): #allow a(this='this', that='that') for existing object
            #self[k]=v
            self.__setattr__(k,v)
  
    def keys(self):
        l= [key for key in Object.keys(self) if not key.startswith('_')]
        l.sort()
        return l
          
    def values(self):
        vs=[]
        for k,v in zip(Object.keys(self), Object.values(self)):
            if not k.startswith('_'):
                vs.append(v)
        vs.sort()
        return vs
        
    def items(self):
        l=[]
        for k in self.keys():
            l.append((k, self[k]))
        l.sort()
        return l
        
    def __next__(self):
        return 'next'
        
    def __repr__(self):
        ret = []
        for k in self.keys():
            ret.append(f"'{str(k)}'")
            ret.append(': ')
            if type(self[k]) == type('string'):
                ret.append('"' + self[k] + '"')
            else:
                ret.append(str(self[k]))
            ret.append(', ')
        ret.pop() #trailing comma
        return '<{' + ''.join(ret) + '}>'

def tests():
    print('==========')
    print(AttrThing(dict(a=1,b=2))) #worked
    print(AttrThing({'a':1,'b':2})) #worked
    print(AttrThing(AttrThing(a=1,b=2))) #worked
    print(AttrThing(a=1,b=2)) #sanity check (works)
        

if __name__=='__main__':
    tests()
    

