#!/usr/bin/env python3
"""
rapyd is meant to mimic python
From the command line, "rapyd hello.py" and "python hello.py" should do the same thing:
    print hello
    and create an importable pyj file
    
    
rapyscript -x  
or 
rapydscript --execute DOES THIS!!

https://www.npmjs.com/package/rapydscript#available-libraries
-o, --output       Output file (default STDOUT).
-x, --execute      Execute the file in-place (no compiled output generated)
-b, --bare         Omit scope-protection wrapper around generated code
-p, --prettify     Beautify output/specify output options.
-V, --version      Print version number and exit.
-t, --test         Run unit tests, making sure the compiler produces usable code, you can specify a file or test everything
	--bench        Run performance tests, you can specify a file or test everything (note that these tests take a while to run)
-6, --es6          Build code for ES6, cleaner output with support for more features (EXPERIMENTAL)
-m, --omit-baselib Omit base library from generated code, make sure you're including baselib.js if you use this
-i, --auto-bind    Automatically bind methods to the class they belong to (more Pythonic, but could interfere with other JS libs)
-h, --help         Print usage and more information on each of these options
	--self         Compile the compiler itself
	--stats        Show compilation metrics in STDERR (time to parse, generate code, etc.)
	--dd           Drop specified decorators (takes a comma-separated list of decorator names)
	--di           Drop specified imports (takes a comma-separated list of import names)
-l, --lint         Check file for errors and compilation problems


"""
import subprocess 
def do(command):
    print('::', command)
    subprocess.call(command, shell=True)
    
def makeHTML(pyFilename):
    pyFileHTML = pyFilename+'.html'
    pyFileJS =   pyFilename+'.js'
    print('::  creating', pyFileHTML)
     
    f = open(pyFileHTML, 'w')
    f.write("""
    <html>
        <head> <meta charset="UTF-8"> 
         </head>
        <body>
           <script type="text/javascript" language="javascript" src="pyFileJS">
           </script>
        </body>
    </html>""".replace('pyFileJS', pyFileJS))
    
    return pyFileHTML
    
import sys
pyFilename = sys.argv[1]
pyFileJS= pyFilename+'.js'

#create py.js file (not currently using the minimalizing -m flag) 
do('rapydscript ' + pyFilename + ' -o ' + pyFileJS) 

#run the py file (not the pyFileJS file)
do ('rapydscript -x ' + pyFilename )

#create the html file needed to run in the browser
do('open ' + makeHTML(pyFilename) )






