TESTING = True
EQUALTO='EQUALTO'
IN = 'IN'
VERBOSE = True

class AttrDict(dict): #http://code.activestate.com/recipes/576972-attrdict/;
    def __init__(self, *a, **kw):
        dict.__init__(self, *a, **kw)
        self.__dict__ = self
        
RESULTS = AttrDict(yes=0, no=0)

if TESTING:
    if VERBOSE:
        print('IS?  Line')          
        
def IS(a, condition, b ):
    import inspect
    curframe = inspect.currentframe()
    calframe = inspect.getouterframes(curframe, 2)[1][3]
    question = inspect.getouterframes(curframe, 2)[1][-2][-1].strip()
    lineNumber = inspect.getouterframes(curframe, 2)[1][-4]
    
    if not condition in [EQUALTO, IN]:
        print ('BADCONDITION', condition)
        return
    
    nice = question.replace('IS(','IS(\t ')
    nice=nice.replace('IN',     '\t\t\t\t\t IN\t')
    nice=nice.replace('EQUALTO','\t\t\t\t\t EQUALTO\t')       

    if (condition == 'EQUALTO' and a == b) or \
       (condition == 'IN'      and a in b):
       if VERBOSE: print(f'yes {lineNumber:3}    {nice}')
       RESULTS.yes += 1
       return
 
    print(f'\n|NO:{lineNumber:3} {nice}')
    print(f"""|||||                       |{a}| \t\t\t\t\t          x x x x   
||||||||is NOT equal to     |{b}|
""")
    RESULTS.no +=1
    
############# end test framework 

import SSstache
import sys
from plumbum import local
from plumbum.cmd import touch, ls
from plumbum.cmd import open as pbOpen #so as not to conflict with python's open
from plumbum.path.utils import delete, copy  #watch out for conflict with python's copy

def lsl(*args):
    """items from ls() returned as list"""
    return ls(*args).split()

        
def makeFile(fName, contents="print('makeFile')"):
    with open(fName,'w') as f:
        f.write(contents)
def contents(pyName=sys.argv[0]):
    return open(pyName).read()
if TESTING:  #makeFile, contents
    makeFile('testMakeFile', 'makefile')
    IS(contents('testMakeFile'), EQUALTO, 'makefile'  )
    delete('testMakeFile')

def baseName(pyName=sys.argv[0]):
    return pyName.replace('.py','')
if TESTING:
    IS(baseName('somename.py'), EQUALTO, 'somename') 
    IS(baseName(), EQUALTO, 'lyte2')


def myHTML(pyName=sys.argv[0]):
    jsName = pyName.replace('.py','.js')
    
    return f"""<html>
            <head> <meta charset="UTF-8">
            <title>pyName</title>
             </head>
            <body>
               <script type="text/javascript" language="javascript"
               src="{jsName}">
               </script>
            </body>
        </html>
    <!--------------------------------------------------------
        This file (index.html) and the other files in this folder 
        were generated by lyte2.py so that the python script named {pyName}
        can run in the browser, using the javascript version named {jsName}

        
    ---------------------------------------------------------------->
     
    """

if TESTING:
    IS('lyte2.py', IN, myHTML() )
    IS('lyte2.js', IN, myHTML() )
    makeFile('dummy.py', "print('I am dummy.py')")
    IS('dummy.js', IN, myHTML('dummy.py') )
    delete('dummy.py')

    
    
def makeMyDir(pyName=sys.argv[0]):
    ret= AttrDict() #for testing
    
    if pyName:
        ret.fileName=pyName
    else:
        ret.fileName=sys.argv[0]
        
    SSstache.makeHTMLdir(ret.fileName)
    return ret
if TESTING:
    makeMyDir()
    IS('lyte2.py', IN, lsl('lyte2') )
    IS('supportScripts',      IN, lsl('lyte2') )
    makeFile('dummy.py', "print('I am dummy.py')" )
    makeMyDir('dummy.py')
    IS('dummy.py', IN, lsl('dummy') )
    IS('supportScripts',      IN, lsl('dummy') )
    delete('dummy.py')
    delete('dummy')

def makeMyIndexHTML(pyName=sys.argv[0]):
    makeMyDir(pyName)
    myDir=baseName(pyName)
    contents(pyName)
    makeFile(f'{myDir}/index.html', myHTML(pyName) )
if TESTING:
    makeFile('makeMyIndex.py', 'this is to test makeFile and makeMyIndex')
    makeMyIndexHTML('makeMyIndex.py')
    IS('<html>', IN, contents('makeMyIndex/index.html') )
        
def makeMyJS(pyName=sys.argv[0]):
    """assumes myDir exists"""
    myDirName = baseName(pyName)
    RS = local['/Users/jonschull-MBPR/rapydscript-ng/rapydscript-ng/bin//rapydscript']
    ret = RS('-x', pyName) #for error checking
    RS(pyName, '-o', f"{myDirName}/{myDirName+'.js'}") 
    return ret
if TESTING: #test makeMyIndexHTML and makeMyJS
    makeFile( 'dummy.py', "print('hello dummy')" )
    makeMyDir('dummy.py')
    makeMyIndexHTML('dummy.py')
    myDirName = baseName('dummy.py')
    IS('index.html', IN, lsl(myDirName) )
    IS('src="dummy.js"',   IN, contents(f'{myDirName}/index.html' ) )
    IS('<html>',     IN, contents(f'{myDirName}/index.html' ) )
    programOutput = makeMyJS('dummy.py')
    IS('dummy.js',   IN, lsl('dummy') )
    IS('hello dummy\n', EQUALTO, programOutput)
    delete('dummy.py')
    delete('dummy')
    
def lyten(pyName=sys.argv[0]):
    """presumes pyName exists"""
    makeMyDir(pyName)
    makeMyJS(pyName)
    makeMyIndexHTML(pyName)
    dirName = baseName(pyName)
if TESTING:
    makeFile('dummy.py', "print('this is from lyten')" )
    lyten('dummy.py')
    pbOpen(f'dummy/index.html')
    

if TESTING:
    print(f"""
______________
|Test Summary
|YES: {RESULTS.yes:4}
|NO: {RESULTS.no:4} """)